# Makefile rules for GAP, to be included from GNUmakefile.
# Partially based on the git and ScummVM build systems.
#
# This requires GNU make!!! You have been warned.

#######################################################################
# Default commands - put the necessary replacements in config.mk      #
#######################################################################

RM      ?= rm -f
RM_REC  ?= $(RM) -r


# Default rule: build gap
all: gap$(EXEEXT)



SOURCES = \
    src/ariths.c \
    src/backtrace.c \
    src/blister.c \
    src/bool.c \
    src/c_filt1.c \
    src/c_meths1.c \
    src/c_oper1.c \
    src/c_random.c \
    src/c_type1.c \
    src/calls.c \
    src/code.c \
    src/compiler.c \
    src/compstat.c \
    src/costab.c \
    src/cyclotom.c \
    src/dt.c \
    src/dteval.c \
    src/exprs.c \
    src/ffdata.c \
    src/finfield.c \
    src/funcs.c \
    src/gap.c \
    src/gap_version.c \
    src/gasman.c \
    src/globalstate.c \
    src/gmpints.c \
    src/gvars.c \
    src/intfuncs.c \
    src/intrprtr.c \
    src/iostream.c \
    src/listfunc.c \
    src/listoper.c \
    src/lists.c \
    src/macfloat.c \
    src/objccoll.c \
    src/objcftl.c \
    src/objects.c \
    src/objfgelm.c \
    src/objpcgel.c \
    src/objscoll.c \
    src/objset.c \
    src/opers.c \
    src/permutat.c \
    src/plist.c \
    src/pperm.c \
    src/precord.c \
    src/profile.c \
    src/range.c \
    src/rational.c \
    src/read.c \
    src/records.c \
    src/saveload.c \
    src/scanner.c \
    src/sctable.c \
    src/set.c \
    src/stats.c \
    src/streams.c \
    src/stringobj.c \
    src/sysfiles.c \
    src/system.c \
    src/systimers.c \
    src/tietze.c \
    src/trans.c \
    src/vars.c \
    src/vec8bit.c \
    src/vecffe.c \
    src/vecgf2.c \
    src/vector.c \
    src/weakptr.c

ifeq ($(HPCGAP),yes)
SOURCES += \
    src/hpc/aobjects.c \
    src/hpc/gapmpi.c \
    src/hpc/serialize.c \
    src/hpc/thread.c \
    src/hpc/threadapi.c \
    src/hpc/tls.c \
    src/hpc/traverse.c \
    src/hpc/zmqgap.c
endif

#
# Update preprocessor flags
#

# Libraries and autoconf defines
CPPFLAGS += $(DEFS) $(GMP_CPPFLAGS)

# Set include paths: always look first in build_dir/src -- this way, we
# use the correct config.h.
CPPFLAGS += -I$(top_builddir)/src 
# also take 

ifeq ($(HPCGAP),no)

# Regular build: Take all sources and headers from src/ directory,
# ignore "hpcgap" subdirectory.
CPPFLAGS += -I$(srcdir)/src
ACTUAL_SOURCES = $(SOURCES)

else # start of HPCGAP specific code

# Compiler should prefer headers from hpcgap/src/ over those in src/.
CPPFLAGS += -I$(srcdir)/hpcgap/src -I$(srcdir)/src

# Use sources generated by ward
ACTUAL_SOURCES = $(addprefix $(top_builddir)/gen/, $(SOURCES))

# Static pattern rule for generate files:
#  for gen/src/FOO.c,  the source is either hpcgap/src/FOO.c it it exists,
#  otherwise src/FOO.c
#
# TODO: invoke "ward" instead of simply cp
gen/src/%.c: src/%.c hpcgap/src/%.c
	@mkdir -p gen/src/
	@for f in $^ ; do \
		if [ -f $$f ] ; then \
			cp $$f $@ ; \
		fi; \
	done

# The preceding rule would normally break if "src/%.c" is present but
# "hpcgap/src/%.c" is missing (or vice-versa; but currently we assume
# that *every* file in hpcgap/src has a counterpart in in src/, and we
# probably should keep it that way).
#
# Anyway, to circument this, we use the following trick to convince Make
# that everything is alright: For each of the possible hpcgap/src/FOO.c,
# we declare an empty Make rule.
DUMMY_HPCGAP_SRC = $(addprefix $(top_builddir)/hpcgap/, $(SOURCES))
$(DUMMY_HPCGAP_SRC):

endif # end of HPCGAP specific code


# the names of all object files
OBJS = $(ACTUAL_SOURCES:.c=.o)

LDFLAGS += $(GMP_LDFLAGS) $(READLINE_LDFLAGS)

# dependencies for the main gap executable
gap$(EXEEXT): $(OBJS)
	$(QUIET_LINK)$(CC) $+ $(LDFLAGS) $(LIBS) -o $@

distclean: clean
	$(RM) src/config.h config.log config.status
	# TODO: extend this

clean:
	$(RM) $(OBJS) gap$(EXEEXT)
	# TODO: extend this


######################################################################
# The build rules follow - normally you should have no need to
# touch whatever comes after here.
######################################################################

# Replace regular output with quiet messages (unless V is set, e.g. "make V=1")
ifneq ($(findstring $(MAKEFLAGS),s),s)
ifndef V
QUIET_CC      = @echo '   ' C '      ' $@;
QUIET_AS      = @echo '   ' AS '     ' $@;
QUIET_AR      = @echo '   ' AR '     ' $@;
QUIET_RANLIB  = @echo '   ' RANLIB ' ' $@;
QUIET_LINK    = @echo '   ' LINK '   ' $@;
QUIET         = @
endif
endif


# Implement automatic header dependency tracking.
# This is somewhat similar to what automake does, but relies
# on compiler support. The result is much simpler.
#
# So, here is what happens: In each directory containing source files,
# a ".deps" subdirectory is created. We then instruct the C compiler
# via special compiler flags to create a ".deps/FOO.d" file when it
# compiles "FOO.c". This file encodes the header dependencies
# of "FOO.c" in a way that make can read (i.e. simply as a bunch
# of make targets with dependencies).
#
# We then include those *.d files into this Makefile, and presto,
# we have implemented dependency tracking.

# The name used for .deps subdirectories. This is mostly here to
# help ensure we use the same name consistently (i.e. to avoid typos)
DEPDIR := .deps

# List of all dependency directories. For now, we hardcode this list.
# In the future, we could derive this from the value of the SOURCES variable.
DEPDIRS = src/$(DEPDIR) src/gen/$(DEPDIR)

# Include the dependency tracking files.
-include $(wildcard $(addsuffix /*.d,$(DEPDIRS)))

# Mark *.d files as PHONY. This stops make from trying to
# recreate them (which it can't), and in particular from looking for potential
# source files. This can save quite a bit of disk access time.
.PHONY: $(wildcard $(addsuffix /*.d,$(DEPDIRS)))

clean-deps:
	$(RM_REC) $(DEPDIRS)
clean: clean-deps





#
# The build rules for object files.
#

# The following flags enable advanced dependency tracking.
# Supported by GCC 3 and newer; clang; Intel C compiler; and more.
#
# TODO: use configure to compute CC_UPDATE_DEP_FLAG, so that we can
# disable it for compilers that don't support it, resp. replace it
# something that works for that compiler
CC_UPDATE_DEP_FLAG = -MMD -MF "$(*D)/$(DEPDIR)/$(*F).d" -MQ "$@" -MP


# Build rule for C files
%.o: %.c
	$(QUIET)$(MKDIR_P) $(*D)/$(DEPDIR)
	$(QUIET_CC)$(CC) $(CC_UPDATE_DEP_FLAG) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# Build rule for assembler files
%.o: %.s
	$(QUIET_AS)$(AS) $(ASFLAGS) $< -o $@


######################################################################
# Handle version information
######################################################################

# the GAP-VERSION-FILE contains the raw version, nothing else
cnf/GAP-VERSION-FILE: FORCE
	@cd $(top_srcdir) && $(SHELL) cnf/GAP-VERSION-GEN
-include cnf/GAP-VERSION-FILE

# generate src/gap_version.c
src/gap_version.c: $(top_srcdir)/src/gap_version.c.in cnf/GAP-VERSION-FILE
	sed -e "s/@GAP_VERSION@/$(GAP_VERSION)/" < $< > $@


######################################################################
# Regenerate parts of the build system as needed.
# The following is based in parts on the corresponding automake rules,
# and in parts on an example in the autoconf manual.
######################################################################

ACLOCAL_M4 =
#ACLOCAL_M4 = $(top_srcdir)/cnf/aclocal.m4
aclocal_m4_deps = $(top_srcdir)/configure.ac
configure_deps = $(top_srcdir)/configure.ac $(CONFIGURE_DEPENDENCIES) $(ACLOCAL_M4)

all: src/config.h

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure: $(configure_deps)
	cd $(srcdir) && autoconf
#$(ACLOCAL_M4): $(top_srcdir)/configure.ac $(wildcard $(srcdir)/cnf/m4/*.m4)
#	cd $(srcdir) && $(ACLOCAL) -I cnf/m4

src/config.h: stamp-h
stamp-h: $(srcdir)/src/config.h.in $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
	echo > $@

$(srcdir)/src/config.h.in: $(configure_deps) 
	cd $(top_srcdir) && autoheader
	rm -f stamp-h
	touch $@

GNUmakefile: $(srcdir)/GNUmakefile.in $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status GNUmakefile



######################################################################
# All .PHONY targets
######################################################################

.PHONY: all clean distclean

.PHONY: FORCE
