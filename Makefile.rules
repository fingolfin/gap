########################################################################
#
# Makefile rules for GAP, to be included from GNUmakefile.
# Partially based on the git and ScummVM build systems.
#
# This requires GNU make!!! You have been warned.
#
########################################################################


########################################################################
# Default rule: build gap
########################################################################
all: gap$(EXEEXT) gac

# Backwards compatibility: add "default" target as alias for "all"
default: all


########################################################################
# Source files
#
# We avoid line continuations, instead use repeatedly "SOURCES+=". This
# makes it trivial to comment out lines, or to insert conditionals.
########################################################################
SOURCES =
SOURCES += src/ariths.c
SOURCES += src/backtrace.c
SOURCES += src/blister.c
SOURCES += src/bool.c
SOURCES += src/c_filter1.c
SOURCES += src/c_methsel1.c
SOURCES += src/c_oper1.c
SOURCES += src/c_random.c
SOURCES += src/c_type1.c
SOURCES += src/calls.c
SOURCES += src/code.c
SOURCES += src/compiler.c
SOURCES += src/compstat.c
SOURCES += src/costab.c
SOURCES += src/cyclotom.c
SOURCES += src/dt.c
SOURCES += src/dteval.c
SOURCES += src/exprs.c
SOURCES += src/ffdata.c
SOURCES += src/finfield.c
SOURCES += src/funcs.c
SOURCES += src/gap.c
SOURCES += gen/gap_version.c	# generated source file
SOURCES += src/gasman.c
ifeq ($(HPCGAP),no)
# FIXME: HPC-GAP and src/globalstate.c are not yet compatible; need to "merge"
# struct GlobalState with ThreadLocalStorage from hpc/tls.h
SOURCES += src/globalstate.c
endif
SOURCES += src/gmpints.c
SOURCES += src/gvars.c
SOURCES += src/intfuncs.c
SOURCES += src/intrprtr.c
SOURCES += src/iostream.c
SOURCES += src/listfunc.c
SOURCES += src/listoper.c
SOURCES += src/lists.c
SOURCES += src/macfloat.c
SOURCES += src/objccoll.c
SOURCES += src/objcftl.c
SOURCES += src/objects.c
SOURCES += src/objfgelm.c
SOURCES += src/objpcgel.c
SOURCES += src/objscoll.c
SOURCES += src/objset.c
SOURCES += src/opers.c
SOURCES += src/permutat.c
SOURCES += src/plist.c
SOURCES += src/pperm.c
SOURCES += src/precord.c
SOURCES += src/profile.c
SOURCES += src/range.c
SOURCES += src/rational.c
SOURCES += src/read.c
SOURCES += src/records.c
SOURCES += src/saveload.c
SOURCES += src/scanner.c
SOURCES += src/sctable.c
SOURCES += src/set.c
SOURCES += src/stats.c
SOURCES += src/streams.c
SOURCES += src/stringobj.c
SOURCES += src/sysfiles.c
SOURCES += src/system.c
SOURCES += src/systimers.c
SOURCES += src/tietze.c
SOURCES += src/trans.c
SOURCES += src/vars.c
SOURCES += src/vec8bit.c
SOURCES += src/vecffe.c
SOURCES += src/vecgf2.c
SOURCES += src/vector.c
SOURCES += src/weakptr.c

ifeq ($(HPCGAP),yes)
  SOURCES += src/hpc/aobjects.c
  ifeq ($(GAPMPI),yes)
    SOURCES += src/hpc/gapmpi.c
  endif
  SOURCES += src/hpc/serialize.c
  SOURCES += src/hpc/thread.c
  SOURCES += src/hpc/threadapi.c
  SOURCES += src/hpc/tls.c
  SOURCES += src/hpc/traverse.c
endif


########################################################################
# Preprocessor flags: defines
########################################################################

# Add DEFS (from autoconf, contains -D flags) and flags for GMP
CPPFLAGS += $(DEFS) $(GMP_CPPFLAGS)

# Add HPC-GAP specific flacks if necessary
ifeq ($(HPCGAP),yes)
CPPFLAGS += $(BOEHM_CPPFLAGS) $(LIBATOMIC_OPS_CPPFLAGS)
endif

# HACK: teach GAP how to "find itself". For a proper solution,
# we should ensure that this value is treated dynamically by the build system,
# i.e. any change to it triggers a recompile of those files (and only those)
# using it. That includes running "make install".
ifeq ($(HPCGAP),yes)
CPPFLAGS += "-DSYS_DEFAULT_PATHS=\"$(abs_top_srcdir)/hpcgap;$(abs_top_srcdir)\""
else
CPPFLAGS += "-DSYS_DEFAULT_PATHS=\"$(abs_top_srcdir)\""
endif


########################################################################
# Preprocessor flags: include paths
########################################################################

# If this is an out-of-tree build, then first add the builddir to the list of
# include directories, so that the correct gen/config.h is picked up (even if
# the user also has an active in-tree build)
ifneq ($(top_builddir),$(srcdir))
  CPPFLAGS += -I$(top_builddir)
endif

ifeq ($(HPCGAP),yes)
  # Prefer headers from hpcgap/src/ over those in src/
  CPPFLAGS += -I$(srcdir)/hpcgap
endif

# Finally look into srcdir
CPPFLAGS += -I$(srcdir)


########################################################################
# Compiler flags
########################################################################
ifeq ($(HPCGAP),yes)
CFLAGS += $(PTHREAD_CFLAGS)
endif


########################################################################
# Linker flags
########################################################################
LDFLAGS += $(GMP_LDFLAGS) $(READLINE_LDFLAGS)

ifeq ($(HPCGAP),yes)
LDFLAGS += $(BOEHM_LDFLAGS) $(LIBATOMIC_OPS_LDFLAGS)
LDFLAGS += $(PTHREAD_CFLAGS) $(PTHREAD_LIBS)
endif


########################################################################
# HPC-GAP: transform code using ward
#
# For HPC-GAP, we must use ward as a preprocessor before invoking the C
# compiler. Moreover, some source files come in two versions: One which is
# located in src/, and another in hpcgap/src/, which is to be used instead
# when building in HPC-GAP mode.
#
# The following build rules achieve this.
########################################################################
ifeq ($(HPCGAP),yes)

# Compute new list of sources from ORIGINAL_SOURCES, by replacing src/ with gen/
ORIGINAL_SOURCES := $(SOURCES)
SOURCES := $(patsubst src/%,gen/%,$(ORIGINAL_SOURCES))

# Determine which sources have a version in "hpcgap/src".
# This uses the fact that "wildcard" only returns paths which refer
# to existing files.
HPCGAP_SOURCES := $(wildcard $(addprefix $(srcdir)/hpcgap/,$(ORIGINAL_SOURCES)))
HPCGAP_SOURCES := $(subst $(srcdir)/hpcgap/src/,,$(HPCGAP_SOURCES))
HPCGAP_SOURCES := $(addprefix gen/,$(HPCGAP_SOURCES))

# static pattern rule for sources with an HPCGAP-version
# (note that ward needs to parse the sources, hence gen/config.h must already be made)
$(HPCGAP_SOURCES): gen/%.c: hpcgap/src/%.c gen/config.h
	@$(MKDIR_P) $(@D)
	$(QUIET_WARD) $(ADDGUARDS2) -cpp $(CPPFLAGS) -- $< > $@

# static pattern rule for sources without an HPCGAP-version
# (note that ward needs to parse the sources, hence gen/config.h must already be made)
gen/%.c: src/%.c gen/config.h
	@$(MKDIR_P) $(@D)
	$(QUIET_WARD) $(ADDGUARDS2) -cpp $(CPPFLAGS) -- $< > $@

# Normally, GNU make deletes intermediate build files, such as the gen/*.c
# files generated by ward. We do not want this for various reasons (performance
# being one of them), so we tell GNU make accordingly:
.SECONDARY: $(SOURCES)

endif # end of HPCGAP specific code


########################################################################
# Object files
########################################################################

# OBJS shall contain the names of all object files that constitute GAP.
# So turn all src/*.c and gen/*.c file names in SOURCES into obj/*.lo
OBJS = $(patsubst gen/%.c,obj/%.lo,$(patsubst src/%.c,obj/%.lo,$(SOURCES)))

# ensure config.h is built before the compilers gets invoked
$(OBJS): gen/config.h


########################################################################
# Quiet rules.
#
# Replace regular output with quiet messages, unless V is set,
# e.g. "make V=1"
########################################################################
ifneq ($(findstring $(MAKEFLAGS),s),s)
ifndef V
QUIET_CC      = @echo '   C       ' $@;
QUIET_AS      = @echo '   AS      ' $@;
QUIET_AR      = @echo '   AR      ' $@;
QUIET_RANLIB  = @echo '   RANLIB  ' $@;
QUIET_LINK    = @echo '   LINK    ' $@;
QUIET_WARD    = @echo '   WARD    ' $@;
QUIET_SED     = @echo '   SED     ' $@;
QUIET         = @
LIBTOOL 	 += --silent
endif
endif


########################################################################
# Rules for automatic header dependency tracking.
#
# This is somewhat similar to what automake does, but relies on compiler
# support. The result is much simpler.
#
# So, here is what happens: In each directory containing source files,
# a ".deps" subdirectory is created. We then instruct the compiler via
# some flags to create a ".deps/FOO.d" file when it compiles "FOO.c".
# This file encodes the header dependencies of "FOO.c" in a way that
# make can read (i.e. simply as a bunch of make targets with
# dependencies).
#
# Finally, to let make track the header dependencies, we include the *.d files.
########################################################################

# DEPDIR is the subdirectory in which the generated dependencies are stored.
DEPDIR := .deps

# List of all dependency directories. For now, we hardcode this list.
# In the future, we could derive this from the value of the SOURCES variable.
DEPDIRS = obj/$(DEPDIR) gen/$(DEPDIR)

# Include the dependency tracking files.
-include $(wildcard $(addsuffix /*.d,$(DEPDIRS)))

# Mark *.d files as PHONY. This stops make from trying to
# recreate them (which it can't), and in particular from looking for potential
# source files. This can save quite a bit of disk access time.
.PHONY: $(wildcard $(addsuffix /*.d,$(DEPDIRS)))

# The following flags instruct the compiler to enable advanced
# dependency tracking. Supported by GCC 3 and newer; clang; Intel C
# compiler; and more.
#
# TODO: use configure to compute CC_UPDATE_DEP_FLAG, so that we can
# disable it for compilers that don't support it, resp. replace it
# something that works for that compiler
CC_UPDATE_DEP_FLAG = -MMD -MF "$(@D)/$(DEPDIR)/$(*F).d" -MQ "$@" -MP


########################################################################
# Compiler rules
########################################################################

COMPILE=$(LIBTOOL) --mode=compile $(CC)

# Build rule for C source files
# Disabled for HPC-GAP, to ensure we always use the output of ward
# and not the original source files
ifeq ($(HPCGAP),no)
obj/%.lo: src/%.c
	@$(MKDIR_P) $(@D)/$(DEPDIR)
	$(QUIET_CC)$(COMPILE) $(CC_UPDATE_DEP_FLAG) $(CFLAGS) $(CC_EXTRA_FLAGS) $(CPPFLAGS) -c $< -o $@
endif

# Build rule for generated C source files
obj/%.lo: gen/%.c
	@$(MKDIR_P) $(@D)/$(DEPDIR)
	$(QUIET_CC)$(COMPILE) $(CC_UPDATE_DEP_FLAG) $(CFLAGS) $(CC_EXTRA_FLAGS) $(CPPFLAGS) -c $< -o $@


########################################################################
# Linker rules for gap executable
########################################################################

LINK=$(LIBTOOL) --mode=link $(CC) -export-dynamic

ifeq ($(SYS_IS_CYGWIN32),yes)

# Special build rules for CYGWIN / Windows: In order to allow kernel
# extensions, we employ a trick: GAP itself is compiled into DLL, in which 
# GAP's standard main function is renamed. And gap.exe is a tiny binary which
# loads that DLL and calls the renamed main function.
src/gap.lo: CC_EXTRA_FLAGS := -DCOMPILECYGWINDLL
gap.dll: $(OBJS)
	$(QUIET_LINK)$(LINK) $(LDFLAGS) -shared $(OBJS) $(LDFLAGS) $(LIBS) -o $@
gap$(EXEEXT): gap.dll
	$(QUIET_LINK)$(LINK) $(LDFLAGS) src/gapw95.c $(LIBS) gap.dll -o $@
	@( if which peflags > /dev/null ; then peflags --cygwin-heap=2048 gap$(EXEEXT) ; fi )

else

# Linking rule and dependencies for the main gap executable
gap$(EXEEXT): $(OBJS)
	$(QUIET_LINK)$(LINK) $(OBJS) $(LDFLAGS) $(LIBS) -o $@

endif


########################################################################
# The "docomp" target regenerates the various src/c_*.c files, and
# replaces the old "etc/docomp" script.
########################################################################
ifeq ($(HPCGAP),yes)
DOCOMP_PREFIX=$(abs_top_srcdir)/hpcgap
else
DOCOMP_PREFIX=$(abs_top_srcdir)
endif
docomp: #gap$(EXEEXT)
	@for file in filter1 methsel1 oper1 random type1 ; do \
	  "$(abs_top_srcdir)"/cnf/GAP-C-GEN $(DOCOMP_PREFIX) $$file ./gap$(EXEEXT) ; \
	done


########################################################################
# Rules for 'make clean'
########################################################################
distclean: clean
	rm -f config.log config.status libtool stamp-h GNUmakefile
	rm -f bin/gap.sh sysinfo.gap
	rm -rf gen obj

clean:
	rm -f obj/*
	rm -f gap$(EXEEXT) gac


########################################################################
# Building subprojects
########################################################################

ifeq ($(GMP_USE_BUILTIN),yes)
gap$(EXEEXT): gmp
gmp:
	$(MAKE) -C extern/gmp -s

$(OBJS): extern/gmp/gmp.h
extern/gmp/gmp.h:
	$(MAKE) -C extern/gmp -s gmp.h

clean: clean-gmp
clean-gmp:
	$(MAKE) -C extern/gmp -s clean

check: check-gmp
check-gmp:
	$(MAKE) -C extern/gmp -s check

.PHONY: gmp clean-gmp check-gmp

endif


########################################################################
# Compatibility mode
#
# If enabled, we prepare the environment to look like it did with
# the old build system, thus enabling existing packages with kernel
# extensions to be compiled against this version of GAP/
########################################################################
ifeq ($(COMPAT_MODE),yes)

# regenerate sysinfo.gap if necessary
all: sysinfo.gap
sysinfo.gap: $(srcdir)/cnf/compat/sysinfo.gap.in config.status
	$(SHELL) ./config.status $@

# regenerate bin/gap.sh if necessary
all: bin/gap.sh
bin/gap.sh: $(srcdir)/cnf/compat/gap.sh.in config.status
	$(SHELL) ./config.status $@

endif


########################################################################
# Documentation rules
########################################################################

# Alias for backwards compatibility
manuals: doc

GAPARGS=
TESTGAP = ./gap$(EXEEXT) -b -m 100m -o 1g -A -q -x 80 -r $(GAPARGS)
TESTGAPauto = ./gap$(EXEEXT) -b -m 100m -o 1g -q -x 80 -r $(GAPARGS)

# TODO: when in HPCGAP mode, we should perhaps instead
# compile the documentation in the hpcgap dir?
# But probably not; instead, we should merge the HPCGAP
# stuff into the regular manual, but inside a (set of)
# separate chapters, which we can perhaps conditionally
# compile ?!?
doc: gap$(EXEEXT)
	( cd $(abs_top_srcdir) ;\
	  echo 'SaveWorkspace( "doc/wsp.g" );' | $(TESTGAPauto) )
	( cd $(abs_top_srcdir)/doc/ref ;\
	  echo 'Read( "makedocrel.g" );' | $(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd $(abs_top_srcdir)/doc/tut ;\
	  echo 'Read( "makedocrel.g" );' | $(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd $(abs_top_srcdir)/doc/changes ;\
	  echo 'Read( "makedocrel.g" );' | $(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd $(abs_top_srcdir)/doc/ref ;\
	  echo 'Read( "makedocrel.g" );' | $(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd $(abs_top_srcdir)/doc/tut ;\
	  echo 'Read( "makedocrel.g" );' | $(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd $(abs_top_srcdir)/doc/changes ;\
	  echo 'Read( "makedocrel.g" );' | $(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	rm $(abs_top_srcdir)/doc/wsp.g

clean-doc:
	rm -f doc/*/chap*.html doc/*/chap*.txt doc/*/*.css doc/*/*.js
	rm -f doc/*/chooser.html doc/*/manual*.pdf
	rm -f doc/*/*.{aux,bbl,blg,brf,idx,ilg,ind,lab,log,out,pnr,six,tex,toc}
	rm -f doc/manualbib.xml.bib

# FIXME: we currently build the manual inside $srcdir; so we don't want "make clean"
# to remove it, as other builds might share the manual.
#clean: clean-doc


.PHONY: doc clean-doc manuals

########################################################################
# Bootstrap rules
########################################################################

PKG_BOOTSTRAP_URL="https://www.gap-system.org/pub/gap/gap4pkgs/"
PKG_MINIMAL="bootstrap-pkg-minimal.tar.gz"
PKG_FULL="bootstrap-pkg-full.tar.gz"

bootstrap-pkg-minimal:
	@if test -e pkg; then \
        echo "The pkg directory already exists. Please move or remove it to proceed."; \
    else \
        wget -N $(PKG_BOOTSTRAP_URL)$(PKG_MINIMAL) ; \
        mkdir pkg ; \
        cd pkg ; \
        tar xzf ../$(PKG_MINIMAL) ; \
    fi;

bootstrap-pkg-full:
	@if test -e pkg; then \
        echo "The pkg directory already exists. Please move or remove it to proceed" ; \
    else \
        wget -N $(PKG_BOOTSTRAP_URL)$(PKG_FULL) ; \
        mkdir pkg ; \
        cd pkg ; \
        tar xzf ../$(PKG_FULL) ; \
    fi;

.PHONY: bootstrap-pkg-minimal bootstrap-pkg-full

########################################################################
# Test runner rules
########################################################################

# TODO



########################################################################
# Handle version information
#
# The approach we use is based on what git.git does. It stores the
# generated version in a separate file cnf/GAP-VERSION-FILE, which makes
# it possible to cleverly handle rebuilding files that use the version.
# It also makes it possible to use version in non-C-code later one,
# should we need to.
########################################################################

GVF = $(srcdir)/cnf/GAP-VERSION-FILE

# the GAP-VERSION-FILE contains the raw version, nothing else
$(GVF): FORCE
	@cd $(top_srcdir) && $(SHELL) cnf/GAP-VERSION-GEN
-include $(GVF)

# generate gen/gap_version.c
gen/gap_version.c: $(top_srcdir)/src/gap_version.c.in $(GVF)
	$(QUIET_SED)sed -e "s/@GAP_VERSION@/$(GAP_VERSION)/" < $< > $@


########################################################################
# Regenerate parts of the build system as needed.
# The following is based in parts on the corresponding automake rules,
# and in parts on an example in the autoconf manual.
########################################################################

ACLOCAL_M4 =
#ACLOCAL_M4 = $(top_srcdir)/cnf/aclocal.m4
aclocal_m4_deps = $(top_srcdir)/configure.ac
configure_deps = $(top_srcdir)/configure.ac $(CONFIGURE_DEPENDENCIES) $(ACLOCAL_M4)

config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure: $(configure_deps)
	cd $(srcdir) && autoconf
#$(ACLOCAL_M4): $(top_srcdir)/configure.ac $(wildcard $(srcdir)/cnf/m4/*.m4)
#	cd $(srcdir) && $(ACLOCAL) -I cnf/m4

gen/config.h: gen/stamp-h
	@if test ! -f $@; then rm -f gen/stamp-h; else :; fi
	@if test ! -f $@; then $(MAKE) gen/stamp-h; else :; fi

gen/stamp-h: $(srcdir)/src/config.h.in config.status
	@rm -f gen/stamp-h
	$(SHELL) ./config.status gen/config.h
	echo > $@

$(srcdir)/src/config.h.in: $(configure_deps) 
	cd $(top_srcdir) && autoheader
	rm -f gen/stamp-h
	touch $@

GNUmakefile: $(srcdir)/GNUmakefile.in config.status
	$(SHELL) ./config.status $@

gac: $(srcdir)/cnf/gac.in config.status
	$(SHELL) ./config.status $@


########################################################################
# All .PHONY targets
########################################################################

.PHONY: all clean distclean check docomp

# The following is needed for the rules handling the GAP version
.PHONY: FORCE

# Backwards compatibility rules
.PHONY: default
