# Makefile rules for GAP, to be included from GNUmakefile.
# Partially based on the git and ScummVM build systems.
#
# This requires GNU make!!! You have been warned.

#######################################################################
# Default rule: build gap
#######################################################################
all: gap$(EXEEXT)

# Backwards compatibility: add "default" target as alias for "all"
default: all


#######################################################################
# TODO: clean this up
#######################################################################
GAPARGS=
TESTGAP = ./gap$(EXEEXT) -b -m 100m -o 1g -A -q -x 80 -r $(GAPARGS)
TESTGAPauto = ./gap$(EXEEXT) -b -m 100m -o 1g -q -x 80 -r $(GAPARGS)


#######################################################################
# Source files
#######################################################################
SOURCES = \
    src/ariths.c \
    src/backtrace.c \
    src/blister.c \
    src/bool.c \
    src/c_filt1.c \
    src/c_meths1.c \
    src/c_oper1.c \
    src/c_random.c \
    src/c_type1.c \
    src/calls.c \
    src/code.c \
    src/compiler.c \
    src/compstat.c \
    src/costab.c \
    src/cyclotom.c \
    src/dt.c \
    src/dteval.c \
    src/exprs.c \
    src/ffdata.c \
    src/finfield.c \
    src/funcs.c \
    src/gap.c \
    src/gap_version.c \
    src/gasman.c \
    src/globalstate.c \
    src/gmpints.c \
    src/gvars.c \
    src/intfuncs.c \
    src/intrprtr.c \
    src/iostream.c \
    src/listfunc.c \
    src/listoper.c \
    src/lists.c \
    src/macfloat.c \
    src/objccoll.c \
    src/objcftl.c \
    src/objects.c \
    src/objfgelm.c \
    src/objpcgel.c \
    src/objscoll.c \
    src/objset.c \
    src/opers.c \
    src/permutat.c \
    src/plist.c \
    src/pperm.c \
    src/precord.c \
    src/profile.c \
    src/range.c \
    src/rational.c \
    src/read.c \
    src/records.c \
    src/saveload.c \
    src/scanner.c \
    src/sctable.c \
    src/set.c \
    src/stats.c \
    src/streams.c \
    src/stringobj.c \
    src/sysfiles.c \
    src/system.c \
    src/systimers.c \
    src/tietze.c \
    src/trans.c \
    src/vars.c \
    src/vec8bit.c \
    src/vecffe.c \
    src/vecgf2.c \
    src/vector.c \
    src/weakptr.c

ifeq ($(HPCGAP),yes)
SOURCES += \
    src/hpc/aobjects.c \
    src/hpc/gapmpi.c \
    src/hpc/serialize.c \
    src/hpc/thread.c \
    src/hpc/threadapi.c \
    src/hpc/tls.c \
    src/hpc/traverse.c \
    src/hpc/zmqgap.c
endif


#######################################################################
# Preprocessor flags
#######################################################################

# Add DEFS (from autoconf, contains -Dfoo flags) and flags for GMP
CPPFLAGS += $(DEFS) $(GMP_CPPFLAGS)

# Setup include paths. Note: our code usually says #include "foo.h",
# but there are instances where it says #include "src/foo.h". Therefore,
# the following include paths come in pairs.

# FIXME: some code also looks for "serialize.h" when it should be
# looking for "hpc/serialize.h", hence we add a third variant of those
# paths. This should eventually be resolved by modifying the code in
# question to properly add the hpc/ prefix to the include header name.

# Include paths: look first in build_dir/src, so the correct config.h is used
CPPFLAGS += -I$(top_builddir)/src -I$(top_builddir)

ifeq ($(HPCGAP),yes)
  # Prefer headers from hpcgap/src/ over those in src/.
  CPPFLAGS += -I$(srcdir)/hpcgap/src -I$(srcdir)/hpcgap/src/hpc -I$(srcdir)/hpcgap
endif

# Finally look into src
CPPFLAGS += -I$(srcdir)/src -I$(srcdir)/src/hpc -I$(srcdir)


#######################################################################
# Linker flags
#######################################################################
LDFLAGS += $(GMP_LDFLAGS) $(READLINE_LDFLAGS)


#######################################################################
# HPC-GAP: transform code using ward
#
# That is, we want to use ward as a preprocessor before invoking the C
# compiler. Moreover, some source files come in two versions: One which
# is located in src/ as usual, and another in hpcgap/src, which is to be
# used instead when building in HPC-GAP mode.
#
# The following build rules achieve this
#######################################################################
ifeq ($(HPCGAP),yes)

# Use sources generated by ward
ORIGINAL_SOURCES := $(SOURCES)
SOURCES := $(addprefix $(top_builddir)/gen/, $(ORIGINAL_SOURCES))

# determine which sources have a version in "hpcgap/src".
# This uses the fact that "wildcard" only returns paths which refer
# to existing files.
HPCGAP_SOURCES := $(subst $(srcdir)/hpcgap/,,$(wildcard $(addprefix $(srcdir)/hpcgap/,$(ORIGINAL_SOURCES))))

# static pattern rule for sources with an HPCGAP-version
$(addprefix gen/,$(HPCGAP_SOURCES)): gen/src/%.c: hpcgap/src/%.c
	@mkdir -p $(dir $@)
	$(QUIET_WARD)$(ADDGUARDS2) $(CPPFLAGS) $< > $@

# static pattern rule for sources without an HPCGAP-version
gen/src/%.c: src/%.c
	@mkdir -p $(dir $@)
	$(QUIET_WARD)$(ADDGUARDS2) $(CPPFLAGS) $< > $@

# normally, GNU make deletes intermediate build files, such as the gen/src/*.c
# files generated by ward. We do not want this for various reasons (performance
# being one of them), so tell GNU make accordingly:
.SECONDARY: $(SOURCES)

endif # end of HPCGAP specific code


#######################################################################
#
#######################################################################

# the names of all object files
OBJS = $(SOURCES:.c=.o)

# all sources implicitly depend on config.h
$(OBJS): src/config.h

# Linking rule and dependencies for the main gap executable
gap$(EXEEXT): $(OBJS)
	$(QUIET_LINK)$(CC) $(OBJS) $(LDFLAGS) $(LIBS) -o $@


# TODO: build gac
# TODO: create sysinfo.gap files for backwards compatibility
# TODO: create fake bin/FOOBAR/ subdirectory, for backwards compatibility
# TODO: implement "strip" rule?!?
# TODO: re-implement cygwin specifics
# TODO: allow bundling GMP, gc, libatomic_ops again, i.e. by providing
#       code that builds this bundled software????
# TODO: same question about zeromq...?

distclean: clean
	rm -f src/config.h config.log config.status

clean:
	rm -f $(OBJS) gap$(EXEEXT)


######################################################################
# Documentation rules
######################################################################

# Alias for backwards compatibility
manuals: doc


# TODO: when in HPCGAP mode, we should perhaps instead
# compile the documentation in the hpcgap dir?
# But probably not; instead, we should merge the HPCGAP
# stuff into the regular manual, but inside a (set of)
# separate chapters, which we can perhaps conditionally
# compile ?!?
doc: gap$(EXEEXT)
	( echo 'SaveWorkspace( "doc/wsp.g" );' | $(TESTGAPauto) )
	( cd doc/ref; echo 'Read( "makedocrel.g" );' | \
          ../../$(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd doc/tut; echo 'Read( "makedocrel.g" );' | \
          ../../$(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd doc/changes; echo 'Read( "makedocrel.g" );' | \
          ../../$(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd doc/ref; echo 'Read( "makedocrel.g" );' | \
          ../../$(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd doc/tut; echo 'Read( "makedocrel.g" );' | \
          ../../$(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( cd doc/changes; echo 'Read( "makedocrel.g" );' | \
          ../../$(TESTGAP) -L ../wsp.g | tee make_manuals.out )
	( rm doc/wsp.g )

clean-doc:
	rm -f 

clean: clean-doc


.PHONY: doc clean-doc manuals

######################################################################
# Bootstrap rules
######################################################################

PKG_BOOTSTRAP_URL="http://www.gap-system.org/pub/gap/gap4pkgs/"
PKG_MINIMAL="bootstrap-pkg-minimal.tar.gz"
PKG_FULL="bootstrap-pkg-full.tar.gz"

bootstrap-pkg-minimal:
	@if test -e pkg; then \
        echo "The pkg directory already exists. Please move or remove it to proceed."; \
    else \
        wget -N $(PKG_BOOTSTRAP_URL)$(PKG_MINIMAL) ; \
        mkdir pkg ; \
        cd pkg ; \
        tar xzf ../$(PKG_MINIMAL) ; \
    fi;

bootstrap-pkg-full:
	@if test -e pkg; then \
        echo "The pkg directory already exists. Please move or remove it to proceed" ; \
    else \
        wget -N $(PKG_BOOTSTRAP_URL)$(PKG_FULL) ; \
        mkdir pkg ; \
        cd pkg ; \
        tar xzf ../$(PKG_FULL) ; \
    fi;

.PHONY: bootstrap-pkg-minimal bootstrap-pkg-full

######################################################################
# Test runner rules
######################################################################

# TODO



######################################################################
# The low-level build rules follow - normally you should have no need to
# touch whatever comes after here.
######################################################################

# Replace regular output with quiet messages (unless V is set, e.g. "make V=1")
ifneq ($(findstring $(MAKEFLAGS),s),s)
ifndef V
QUIET_CC      = @echo '   C       ' $@;
QUIET_AS      = @echo '   AS      ' $@;
QUIET_AR      = @echo '   AR      ' $@;
QUIET_RANLIB  = @echo '   RANLIB  ' $@;
QUIET_LINK    = @echo '   LINK    ' $@;
QUIET_WARD    = @echo '   WARD    ' $@;
QUIET_SED     = @echo '   SED     ' $@;
QUIET         = @
endif
endif


# Rules for automatic header dependency tracking.
# This is somewhat similar to what automake does, but relies
# on compiler support. The result is much simpler.
#
# So, here is what happens: In each directory containing source files,
# a ".deps" subdirectory is created. We then instruct the C compiler
# via special compiler flags to create a ".deps/FOO.d" file when it
# compiles "FOO.c". This file encodes the header dependencies
# of "FOO.c" in a way that make can read (i.e. simply as a bunch
# of make targets with dependencies).
#
# We then include those *.d files into this Makefile, and presto,
# we have implemented dependency tracking.

# The name used for .deps subdirectories. This is mostly here to
# help ensure we use the same name consistently (i.e. to avoid typos)
DEPDIR := .deps

# List of all dependency directories. For now, we hardcode this list.
# In the future, we could derive this from the value of the SOURCES variable.
DEPDIRS = src/$(DEPDIR) src/gen/$(DEPDIR)

# Include the dependency tracking files.
-include $(wildcard $(addsuffix /*.d,$(DEPDIRS)))

# Mark *.d files as PHONY. This stops make from trying to
# recreate them (which it can't), and in particular from looking for potential
# source files. This can save quite a bit of disk access time.
.PHONY: $(wildcard $(addsuffix /*.d,$(DEPDIRS)))

# Ensure "make clean" removes dep files
clean-deps:
	rm -rf $(DEPDIRS)
clean: clean-deps

.PHONY: clean-deps


# The following flags instruct the compiler to enable advanced
# dependency tracking. Supported by GCC 3 and newer; clang; Intel C
# compiler; and more.
#
# TODO: use configure to compute CC_UPDATE_DEP_FLAG, so that we can
# disable it for compilers that don't support it, resp. replace it
# something that works for that compiler
CC_UPDATE_DEP_FLAG = -MMD -MF "$(*D)/$(DEPDIR)/$(*F).d" -MQ "$@" -MP


# Build rule for C files
%.o: %.c
	@$(MKDIR_P) $(*D)/$(DEPDIR)
	$(QUIET_CC)$(CC) $(CC_UPDATE_DEP_FLAG) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# Build rule for assembler files
%.o: %.s
	$(QUIET_AS)$(AS) $(ASFLAGS) $< -o $@


######################################################################
# Handle version information
######################################################################

GVF = $(srcdir)/cnf/GAP-VERSION-FILE

# the GAP-VERSION-FILE contains the raw version, nothing else
$(GVF): FORCE
	@cd $(top_srcdir) && $(SHELL) cnf/GAP-VERSION-GEN
-include $(GVF)

# generate src/gap_version.c
src/gap_version.c: $(top_srcdir)/src/gap_version.c.in $(GVF)
	$(QUIET_SED)sed -e "s/@GAP_VERSION@/$(GAP_VERSION)/" < $< > $@


######################################################################
# Regenerate parts of the build system as needed.
# The following is based in parts on the corresponding automake rules,
# and in parts on an example in the autoconf manual.
######################################################################

ACLOCAL_M4 =
#ACLOCAL_M4 = $(top_srcdir)/cnf/aclocal.m4
aclocal_m4_deps = $(top_srcdir)/configure.ac
configure_deps = $(top_srcdir)/configure.ac $(CONFIGURE_DEPENDENCIES) $(ACLOCAL_M4)

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure: $(configure_deps)
	cd $(srcdir) && autoconf
#$(ACLOCAL_M4): $(top_srcdir)/configure.ac $(wildcard $(srcdir)/cnf/m4/*.m4)
#	cd $(srcdir) && $(ACLOCAL) -I cnf/m4

src/config.h: stamp-h
	@if test ! -f $@; then rm -f stamp-h; else :; fi
	@if test ! -f $@; then $(MAKE) stamp-h; else :; fi

stamp-h: $(srcdir)/src/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
	echo > $@

$(srcdir)/src/config.h.in: $(configure_deps) 
	cd $(top_srcdir) && autoheader
	rm -f stamp-h
	touch $@

GNUmakefile: $(srcdir)/GNUmakefile.in $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status GNUmakefile



######################################################################
# All .PHONY targets
######################################################################

.PHONY: all clean distclean check

# The following is needed for the rules handling the GAP version
.PHONY: FORCE

# Backwards compatibility rules
.PHONY: default
